// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Content interface {
	IsContent()
	GetID() string
	GetTitle() string
	GetImage() string
	GetDescription() string
	GetGenre() *Genre
}

type Anime struct {
	ID          string `json:"id"`
	Title       string `json:"title"`
	Image       string `json:"image"`
	Description string `json:"description"`
	Genre       *Genre `json:"genre"`
}

func (Anime) IsContent()                  {}
func (this Anime) GetID() string          { return this.ID }
func (this Anime) GetTitle() string       { return this.Title }
func (this Anime) GetImage() string       { return this.Image }
func (this Anime) GetDescription() string { return this.Description }
func (this Anime) GetGenre() *Genre       { return this.Genre }

type AuthPayload struct {
	Token string `json:"token"`
}

type Genre struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type LoginUser struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type Manga struct {
	ID          string `json:"id"`
	Title       string `json:"title"`
	Image       string `json:"image"`
	Description string `json:"description"`
	Genre       *Genre `json:"genre"`
}

func (Manga) IsContent()                  {}
func (this Manga) GetID() string          { return this.ID }
func (this Manga) GetTitle() string       { return this.Title }
func (this Manga) GetImage() string       { return this.Image }
func (this Manga) GetDescription() string { return this.Description }
func (this Manga) GetGenre() *Genre       { return this.Genre }

type Mutation struct {
}

type NewAnime struct {
	Title       string `json:"title"`
	Image       string `json:"image"`
	Description string `json:"description"`
	GenreID     string `json:"genreID"`
}

type NewManga struct {
	Title       string `json:"title"`
	Image       string `json:"image"`
	Description string `json:"description"`
	GenreID     string `json:"genreID"`
}

type NewReview struct {
	ContentID   string      `json:"contentID"`
	ContentType ContentType `json:"contentType"`
	Comment     string      `json:"comment"`
	Rating      float64     `json:"rating"`
}

type Query struct {
}

type RegisterUser struct {
	Email    string `json:"email"`
	Username string `json:"username"`
	Password string `json:"password"`
}

type Review struct {
	ID          string      `json:"id"`
	UserID      string      `json:"userID"`
	ContentID   string      `json:"contentID"`
	ContentType ContentType `json:"contentType"`
	Rating      float64     `json:"rating"`
	Comment     string      `json:"comment"`
	CreatedAt   string      `json:"createdAt"`
}

type User struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	Email     string `json:"email"`
	Role      string `json:"role"`
	Salt 	  string `json:"salt"`
	Hash 	  string `json:"hash"`
	CreatedAt string `json:"createdAt"`
}

type ContentType string

const (
	ContentTypeAnime ContentType = "anime"
	ContentTypeManga ContentType = "manga"
)

var AllContentType = []ContentType{
	ContentTypeAnime,
	ContentTypeManga,
}

func (e ContentType) IsValid() bool {
	switch e {
	case ContentTypeAnime, ContentTypeManga:
		return true
	}
	return false
}

func (e ContentType) String() string {
	return string(e)
}

func (e *ContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContentType", str)
	}
	return nil
}

func (e ContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
