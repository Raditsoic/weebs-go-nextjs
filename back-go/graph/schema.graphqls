# Anime and Manga Schema
interface Content {
  id: ID!
  title: String!
  image: String!
  description: String!
  genre: Genre!
}

type Genre {
  id: ID!
  name: String!
}

type Anime implements Content {
  id: ID!
  title: String!
  image: String!
  description: String!
  genre: Genre!
}

type Manga implements Content {
  id: ID!
  title: String!
  image: String!
  description: String!
  genre: Genre!
}

# User Schema
scalar DateTime

type User {
  id: ID!
  username: String!
  email: String!
  role: String!
  createdAt: DateTime!
}

type AuthPayload {
  token: String!
}

# Review Schema
enum ContentType {
  anime
  manga
}

type Review {
  id: ID!
  userID: ID!
  contentID: ID!
  contentType: ContentType!
  rating: Float!
  comment: String!
  createdAt: DateTime!
}

# Anime and Manga List Schema
enum Status {
  watching
  completed
  onHold
  dropped
  planToWatch
}

interface List {
  id: ID!
  userID: ID!
}

interface ListEntries {
  id: ID!
  status: Status!
}

type AnimeListEntries implements ListEntries {
  id: ID!
  status: Status!
  anime: Anime! 
} 

type AnimeList implements List{
  id: ID!
  userID: ID!
  entries: [AnimeListEntries!]!
}

type MangaListEntries implements ListEntries {
  id: ID!
  status: Status!
  manga: Manga! 
}

type MangaList implements List {
  id: ID!
  userID: ID!
  entries: [MangaListEntries!]!
}

# Input for Mutations
input NewAnime {
  title: String!
  image: String!
  description: String!
  genreID: ID!
}

input NewManga {
  title: String!
  image: String!
  description: String!
  genreID: ID!
}

input RegisterUser {
  email: String!
  username: String!
  password: String!
}

input LoginUser {
  username: String!
  password: String!
}

input NewReview {
  contentID: ID!
  contentType: ContentType!
  comment: String!
  rating: Float!
}

input NewAnimeListEntry {
  status: Status!
  contentID: ID!
}

input NewMangaListEntry {
  status: Status!
  contentID: ID!
}

# Queries and Mutations
type Query {
  animes: [Anime!]!
  mangas: [Manga!]!
  oneAnime(id: ID!): Anime!
  oneManga(id: ID!): Manga!
  animeList(userID: ID!): AnimeList!
  mangaList(userID: ID!): MangaList!
  genres: [Genre!]!
  me: User!
}

type Mutation {
  createAnime(input: NewAnime!): Anime!
  createManga(input: NewManga!): Manga!
  register(input: RegisterUser!): AuthPayload!
  login(input: LoginUser!): AuthPayload!
  saveReview(input: NewReview!): Review!
  addMangaListEntries(input: NewMangaListEntry!): MangaListEntries!
  addAnimeListEntries(input: NewAnimeListEntry!): AnimeListEntries!
}


