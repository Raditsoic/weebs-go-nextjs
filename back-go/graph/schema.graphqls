type Anime {
  id: ID!
  title: String!
  image: String!
  description: String!
  genre: Genre!
}

type Manga {
  id: ID!
  title: String!
  image: String!
  description: String!
  genre: Genre!  
}

type User {
  id: ID! 
  username: String!
  email: String!
  salt: String!
  hash: String!
  role: String!
}

type Genre {
  id: ID!
  name: String!
}

type Review {
  id: ID!
  userID: ID!
  contentID: ID!
  contentType: String!
  rating: Float!
  comment: String!
  createdAt: String!
}

type AuthPayload {
  token: String!
  user: User!
}

input NewAnime {
  title: String!
  image: String!
  description: String!
  genreId: ID!
}

input NewManga {
  title: String!
  image: String!
  description: String!
  genreId: ID!
}

input RegisterUser {
  email: String!
  username: String!
  password: String!
}

input LoginUser {
  username: String!
  password: String!
}

input NewReview {
  id: ID
  contentID: ID
  contentType: String!
  comment: String!
  rating: Float!
}

type Query {
  animes: [Anime!]!
  mangas: [Manga!]!
  oneAnime(id: ID!): Anime!
  oneManga(id: ID!): Manga!
}

type Mutation {
  createAnime(input: NewAnime!): Anime!
  createManga(input: NewManga!): Manga!
  register(input: RegisterUser!): AuthPayload!
  login(input: LoginUser!): AuthPayload!
  saveReview(input: NewReview!): Review!
} 
