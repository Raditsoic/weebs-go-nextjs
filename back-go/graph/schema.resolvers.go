package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	"fmt"

	"github.com/Raditsoic/anime-go/graph/model"
	"github.com/Raditsoic/anime-go/middleware"
	"github.com/Raditsoic/anime-go/utils"
)

// CreateAnime is the resolver for the createAnime field.
func (r *mutationResolver) CreateAnime(ctx context.Context, input model.NewAnime) (*model.Anime, error) {
	claims := ctx.Value(middleware.UserContextKey)
	if claims == nil {
		return nil, fmt.Errorf("Unauthorized.")
	}

	userClaims, ok := claims.(*utils.Claims)
	if !ok {
		return nil, fmt.Errorf("Invalid token.")
	}

	if userClaims.Role != "admin" {
		return nil, fmt.Errorf("Unauthorized: Only admins can create mangas.")
	}

	return r.AnimeService.CreateAnime(input)
}

// CreateManga is the resolver for the createManga field.
func (r *mutationResolver) CreateManga(ctx context.Context, input model.NewManga) (*model.Manga, error) {
	claims := ctx.Value(middleware.UserContextKey)
	if claims == nil {
		return nil, fmt.Errorf("Unauthorized.")
	}

	userClaims, ok := claims.(*utils.Claims)
	if !ok {
		return nil, fmt.Errorf("Invalid token.")
	}

	if userClaims.Role != "admin" {
		return nil, fmt.Errorf("Unauthorized: Only admins can create mangas.")
	}

	return r.MangaService.CreateManga(input)
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterUser) (*model.AuthPayload, error) {
	return r.UserService.Register(input)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginUser) (*model.AuthPayload, error) {
	return r.UserService.Login(input)
}

// SaveReview is the resolver for the saveReview field.
func (r *mutationResolver) SaveReview(ctx context.Context, input model.NewReview) (*model.Review, error) {
	claims := ctx.Value(middleware.UserContextKey)
	if claims == nil {
		return nil, fmt.Errorf("Unauthorized.")
	}

	userClaims, ok := claims.(*utils.Claims)
	if !ok {
		return nil, fmt.Errorf("Invalid token.")
	}

	userID := userClaims.ID

	return r.ReviewService.SaveReview(input, userID)
}

// AddMangaListEntries is the resolver for the addMangaListEntries field.
func (r *mutationResolver) AddMangaListEntries(ctx context.Context, input model.NewMangaListEntry) (*model.MangaListEntries, error) {
	claims := ctx.Value(middleware.UserContextKey)
	if claims == nil {
		return nil, fmt.Errorf("Unauthorized.")
	}

	userClaims, ok := claims.(*utils.Claims)
	if !ok {
		return nil, fmt.Errorf("Invalid token.")
	}

	userID := userClaims.ID

	return r.MangaService.AddMangatoMangaList(userID, input)
}

// AddAnimeListEntries is the resolver for the addAnimeListEntries field.
func (r *mutationResolver) AddAnimeListEntries(ctx context.Context, input model.NewAnimeListEntry) (*model.AnimeListEntries, error) {
	panic(fmt.Errorf("not implemented: AddAnimeListEntries - addAnimeListEntries"))
}

// Animes is the resolver for the animes field.
func (r *queryResolver) Animes(ctx context.Context) ([]*model.Anime, error) {
	claims := ctx.Value(middleware.UserContextKey)
	if claims == nil {
		return nil, fmt.Errorf("Unauthorized")
	}

	return r.AnimeService.GetAnimes()
}

// Mangas is the resolver for the mangas field.
func (r *queryResolver) Mangas(ctx context.Context) ([]*model.Manga, error) {
	claims := ctx.Value(middleware.UserContextKey)
	if claims == nil {
		return nil, fmt.Errorf("Unauthorized")
	}

	return r.MangaService.GetMangas()
}

// OneAnime is the resolver for the oneAnime field.
func (r *queryResolver) OneAnime(ctx context.Context, id string) (*model.Anime, error) {
	claims := ctx.Value(middleware.UserContextKey)
	if claims == nil {
		return nil, fmt.Errorf("Unauthorized")
	}

	return r.AnimeService.GetAnimeByID(id)
}

// OneManga is the resolver for the oneManga field.
func (r *queryResolver) OneManga(ctx context.Context, id string) (*model.Manga, error) {
	claims := ctx.Value(middleware.UserContextKey)
	if claims == nil {
		return nil, fmt.Errorf("Unauthorized")
	}

	return r.MangaService.GetMangaByID(id)
}

// AnimeList is the resolver for the animeList field.
func (r *queryResolver) AnimeList(ctx context.Context, userID string) (*model.AnimeList, error) {
	panic(fmt.Errorf("not implemented: AnimeList - animeList"))
}

// MangaList is the resolver for the mangaList field.
func (r *queryResolver) MangaList(ctx context.Context, userID string) (*model.MangaList, error) {
	panic(fmt.Errorf("not implemented: MangaList - mangaList"))
}

// Genres is the resolver for the genres field.
func (r *queryResolver) Genres(ctx context.Context) ([]*model.Genre, error) {
	panic(fmt.Errorf("not implemented: Genres - genres"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
