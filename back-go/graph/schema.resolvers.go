package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"

	"github.com/Raditsoic/anime-go/graph/model"
)

// CreateAnime is the resolver for the createAnime field.
func (r *mutationResolver) CreateAnime(ctx context.Context, input model.NewAnime) (*model.Anime, error) {
	return r.AnimeService.CreateAnime(input)
}

// CreateManga is the resolver for the createManga field.
func (r *mutationResolver) CreateManga(ctx context.Context, input model.NewManga) (*model.Manga, error) {
	return r.MangaService.CreateManga(input)
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterUser) (*model.AuthPayload, error) {
	return r.UserService.Register(input)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginUser) (*model.AuthPayload, error) {
	return r.UserService.Login(input)
}

// Animes is the resolver for the animes field.
func (r *queryResolver) Animes(ctx context.Context) ([]*model.Anime, error) {
	return r.AnimeService.GetAnimes()
}

// Mangas is the resolver for the mangas field.
func (r *queryResolver) Mangas(ctx context.Context) ([]*model.Manga, error) {
	return r.MangaService.GetMangas()
}

// OneAnime is the resolver for the oneAnime field.
func (r *queryResolver) OneAnime(ctx context.Context, id string) (*model.Anime, error) {
	return r.AnimeService.GetAnimeByID(id)
}

// OneManga is the resolver for the oneManga field.
func (r *queryResolver) OneManga(ctx context.Context, id string) (*model.Manga, error) {
	return r.MangaService.GetMangaByID(id)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
